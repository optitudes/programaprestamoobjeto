package co.edu.uniquindio.programaprestamoobjeto.model;

import java.util.ArrayList;
import java.util.Calendar;

/**
 * esta clase representa el prestamo, contiene la información del
 * prestamo a solicitar
 * universidad del quindio
 * ingeniería de sistemas y computación
 * @author Juan Sebastian Rojas Juan Pablo Cardona
 */
public class Prestamo {
	
	private String codigo;
    
	private boolean estado;	
    
	private Calendar fechaPrestamo;
	private Calendar fechaEntrega;
	
	private int    TotalObtejosPrestados;
	
	private double valor;
	
	private double valorUnitario;
	
	private Cliente cliente=null;
	
	private Empleado empleado=null;
	
	private ArrayList<DetallePrestamo> listaDetallesPrestamos;
	
	
	
	public Prestamo(String codigo,  Calendar fechaPrestamo, Calendar fechaEntrega,
			double valor, double valorUnitario, Cliente cliente, Empleado empleado
			) {

		this.codigo = codigo;
		this.estado = true;
		this.fechaPrestamo = Calendar.getInstance();
		this.fechaEntrega = fechaEntrega;
		this.TotalObtejosPrestados =0;
		this.valor =0;
		this.cliente = cliente;
		this.empleado = empleado;
		this.listaDetallesPrestamos = new ArrayList<>();
	}
	private void actualizarObjetosPrestados() {
		int total=0;
		for(DetallePrestamo detallePrestamosAux:listaDetallesPrestamos)
		{
			total+=detallePrestamosAux.getUnidadesPrestadas();
		}
		this.TotalObtejosPrestados=total;
	}
	private void actualizarValorPrestamo() {
		int total=0;
		for(DetallePrestamo detallePrestamosAux:listaDetallesPrestamos)
		{
			total+=detallePrestamosAux.getSubTotal();
		}
		this.TotalObtejosPrestados=total;
	}
	
	public String getCodigo() {
		return codigo;
	}
	public void setCodigo(String codigo) {
		this.codigo = codigo;
	}
	public boolean isEstado() {
		return estado;
	}
	public void setEstado(boolean estado) {
		this.estado = estado;
	}
	public Calendar getFechaPrestamo() {
		return fechaPrestamo;
	}
	public void setFechaPrestamo(Calendar fechaPrestamo) {
		this.fechaPrestamo = fechaPrestamo;
	}
	public Calendar getFechaEntrega() {
		return fechaEntrega;
	}
	public void setFechaEntrega(Calendar fechaEntrega) {
		this.fechaEntrega = fechaEntrega;
	}
	public int getTotalObtejosPrestados() {
		return TotalObtejosPrestados;
	}
	public void setTotalObtejosPrestados(int totalObtejosPrestados) {
		TotalObtejosPrestados = totalObtejosPrestados;
	}
	public double getValor() {
		return valor;
	}
	public void setValor(double valor) {
		this.valor = valor;
	}
	public double getValorUnitario() {
		return valorUnitario;
	}
	public void setValorUnitario(double valorUnitario) {
		this.valorUnitario = valorUnitario;
	}
	public Cliente getCliente() {
		return cliente;
	}
	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}
	public Empleado getEmpleado() {
		return empleado;
	}
	public void setEmpleado(Empleado empleado) {
		this.empleado = empleado;
	}
	public ArrayList<DetallePrestamo> getListaDetallesPrestamos() {
		return listaDetallesPrestamos;
	}
	public void setListaDetallesPrestamos(ArrayList<DetallePrestamo> listaDetallesPrestamos) {
		this.listaDetallesPrestamos = listaDetallesPrestamos;
	}
	/**
	 * metodo toString de la clase Prestamo
	 */
	@Override
	public String toString() {
		return "Prestamo [codigo=" + codigo + ", estado=" + estado + ", fechaPrestamo=" + fechaPrestamo
				+ ", fechaEntrega=" + fechaEntrega + ", TotalObtejosPrestados=" + TotalObtejosPrestados + ", valor="
				+ valor + ", valorUnitario=" + valorUnitario + ", cliente=" + cliente + ", empleado=" + empleado
				+ ", listaDetallesPrestamos=" + listaDetallesPrestamos + "]";
	}
	/**
	 * método que verifica si el nomnbre de un objeto ingresado 
	 * como parametro está asociado con un detalle prestamo.
	 * @param nombreObjeto
	 * @return respuesta(true si pertenece, false si no pertenece)
	 */
	public boolean verificarPertenciaPrestamo(String nombreObjeto) {
		boolean respuesta=false;
		
		for(DetallePrestamo detalleAux: listaDetallesPrestamos)
		{
			respuesta=detalleAux.verificarObjetoNombre(nombreObjeto);
			if(respuesta==true)
				return respuesta;
		}
		return respuesta;
	}
	
	/**
	 * método que crea un detalle prestamo.
	 * @param unidadesPrestadas
	 * @param valor
	 * @param objetoAux
	 * @throws SinCupoDetallePrestamo 
	 */
	public void crearOActualizarDetallePrestamo(int unidadesPrestadas, double valor, Objeto objetoAux) {
		String  codigoObjetoBuscar;
		String  codigoObjeto;
		int     unidadesRegistradas;
		int     unidadesAgregar;
		boolean error=true;
		double  subtotal;
		
		codigoObjetoBuscar=objetoAux.getCodigo();
		
		if(detallePrestamo1==null)
		{
			detallePrestamo1=new DetallePrestamo(unidadesPrestadas, objetoAux);
			subtotal=detallePrestamo1.calcularSubtotal();
			detallePrestamo1.setSubTotal(subtotal);
			error=false;
		}
		else
		{
			codigoObjeto=detallePrestamo1.getCodigoObjeto();
			if(codigoObjeto.equalsIgnoreCase(codigoObjetoBuscar))
			{
				unidadesRegistradas=detallePrestamo1.getUnidadesPrestadas();
				unidadesAgregar=unidadesRegistradas+unidadesPrestadas;
				detallePrestamo1.setUnidadesPrestadas(unidadesAgregar);
				error=false;

			}
			else
			{
				if(detallePrestamo2==null)
				{
					detallePrestamo2=new DetallePrestamo(unidadesPrestadas, valor);
					detallePrestamo2.setObjeto(objetoAux);
					subtotal=detallePrestamo2.calcularSubtotal();
					detallePrestamo2.setSubTotal(subtotal);

					error=false;
				}
				else
				{
					codigoObjeto=detallePrestamo2.getCodigoObjeto();
					if(codigoObjeto.equalsIgnoreCase(codigoObjetoBuscar))
					{
						unidadesRegistradas=detallePrestamo2.getUnidadesPrestadas();
						unidadesAgregar=unidadesRegistradas+unidadesPrestadas;
						detallePrestamo2.setUnidadesPrestadas(unidadesAgregar);
						error=false;
					}
				}
			}		
		}
		
		if(error==true)
			throw new SinCupoDetallePrestamo("no hay cupo para más detalles de prestamo...");
	}
	/**
	 * método que elimina los Detalles del prestamos
	 */
	public void limpiarDetallePrestamos() {
		if(detallePrestamo1!=null)
			detallePrestamo1=null;
		if(detallePrestamo2!=null)
			detallePrestamo2=null;
	}
	/**
	 * método que setea el objeto en detalle prestamo
	 * @param objetoAux
	 */
	public void setObjetoDetallePrestamo(Objeto objetoAux) {
		String codigoObjetoAux;
		String codigoObjeto;
		
		boolean seteadoCompleado=false;
		
		codigoObjetoAux=objetoAux.getCodigo();
		if(detallePrestamo1!=null && seteadoCompleado==false)
		{
			codigoObjeto=detallePrestamo1.getCodigoObjeto();
			if(codigoObjeto.equalsIgnoreCase(codigoObjetoAux))
			{
				detallePrestamo1.setObjeto(objetoAux);
				seteadoCompleado=true;
			}
			
		}
		if(detallePrestamo2!=null && seteadoCompleado==false)
		{
			codigoObjeto=detallePrestamo2.getCodigoObjeto();
			if(codigoObjeto.equalsIgnoreCase(codigoObjetoAux))
			{
				detallePrestamo2.setObjeto(objetoAux);
				seteadoCompleado=true;
			}
			
		}
		
	}
	/**
	 * método que retorna el nombre del empleado registrado en el
	 * prestamo
	 * @return nombreEmpleado
	 */
	public String getNombreEmpleado() {
		String nombreEmpleado;
		nombreEmpleado=empleado.getNombre();
		return nombreEmpleado;
	}
	/**
	 * método que retorna el nombre del cliente registrado 
	 * en el prestamo
	 * @return nombreCliente
	 */
	public String getNombreCliente() {
		String nombreCliente;
		nombreCliente=cliente.getNombre();
		return nombreCliente;
	}
	/**
	 * método que retorna la cantidad de unidades prestadas de un objeto
	 * si el detalle prestamo es null se retorna un 0
	 * @param numeroDetallePrestamo
	 * @return
	 */
	public int getunidadesPrestadasDetalle(int numeroDetallePrestamo) {
		int cantidadUnidadesPrestadas=0;
		if(detallePrestamo1!=null && numeroDetallePrestamo==1)
		{
			cantidadUnidadesPrestadas=detallePrestamo1.getUnidadesPrestadas();
			return cantidadUnidadesPrestadas;
		}
		if(detallePrestamo2!=null && numeroDetallePrestamo==2)
		{
			cantidadUnidadesPrestadas=detallePrestamo2.getUnidadesPrestadas();
			return cantidadUnidadesPrestadas;
		}
		
		return cantidadUnidadesPrestadas;
	}
	public String obtenerCodigoObjeto(int numeroDetallePrestamo) {
		String codigoObjeto="";
		if(detallePrestamo1!=null && numeroDetallePrestamo==1)
		{
			codigoObjeto=detallePrestamo1.getCodigoObjeto();
			return codigoObjeto;
		}
		if(detallePrestamo2!=null && numeroDetallePrestamo==2)
		{
			codigoObjeto=detallePrestamo2.getCodigoObjeto();
			return codigoObjeto;
		}
		
		return codigoObjeto;
	}
	/**
	 * método que verifica si el nombre ingresado
	 * coincide con el del empleado registraddo en 
	 * el prestamo
	 * @param nombreEmpleadoBuscar
	 * @return coinciden
	 */
	public boolean verificarEmpleadoNombre(String nombreEmpleadoBuscar) {
		String nombreEmpleado;
		boolean coinciden=false;
		nombreEmpleado=empleado.getNombre();
		if(nombreEmpleado.equalsIgnoreCase(nombreEmpleadoBuscar))
		{
			coinciden=true;
		}
		
		return coinciden;
	}
	/**
	 * método que verifica si el nombre ingresado
		 * coincide con el del empleado registraddo en 
		 * el prestamo
	 * @param codigoEmpleado
	 * @return
	 */
	public boolean verificarEmpleadoCodigo(String codigoEmpleadoBuscar) {
		String codigoEmpleado;
		boolean coinciden=false;
		codigoEmpleado=empleado.getNombre();
		if(codigoEmpleado.equalsIgnoreCase(codigoEmpleadoBuscar))
		{
			coinciden=true;
		}
		
		return coinciden;		
	}
	
	/**Punto 1
     * Metodo que consulta la informacion del empleado que
     * haya realizado un préstamo de un objeto dado el codigo del objeto
     * @param codigoObjeto
     */
    public Empleado consultarEmpleadoPrestamoObjeto(String codigoObjeto) {
        Empleado empleadoEncontrado = null;
        boolean  encontroObjeto=false;
        
        if(detallePrestamo1!=null)
        {
        	encontroObjeto=detallePrestamo1.validarObjetoPrestado(codigoObjeto);
        	if(encontroObjeto==true)
        	{
        		empleadoEncontrado=empleado;
        		return empleadoEncontrado;
        	}
        }
        if(detallePrestamo2!=null)
        {
        	encontroObjeto=detallePrestamo2.validarObjetoPrestado(codigoObjeto);
        	if(encontroObjeto==true)
        	{
        		empleadoEncontrado=empleado;
        		return empleadoEncontrado;
        	}
        }
        return empleadoEncontrado ;
    }

    
    
    /**Punto 2
     * Este metodo verifica si el empelado tiene
     *  el rango de anios de experincia  y verifica si la unidades prestadas
     *  se encuentran en el rango mayorigual 5 y menor igual 15
     * @return
     */

    public boolean verificarPrestamoEmpleadoRango() {
    	int     aniosExperiencia;
    	boolean cumpleRango=false;
    	boolean cumpleRequisitos=false;
    	
    	aniosExperiencia=empleado.getAniosExperiencia();
    	
    	if(aniosExperiencia>=2)
    	{
    		if(detallePrestamo1!=null)
    		{
    			cumpleRango=detallePrestamo1.verificarRangoUnidades();
    			if(cumpleRango==true)
    			{
    				cumpleRequisitos=true;
    				return cumpleRequisitos;

    			}	
    		}
    		if(detallePrestamo2!=null)
    		{
    			cumpleRango=detallePrestamo2.verificarRangoUnidades();
    			if(cumpleRango==true)
    			{
    				cumpleRequisitos=true;
    				return cumpleRequisitos;

    			}	
    		}		
    	}
    	return cumpleRequisitos;
    }

    /**punto 3.b
     * Este metodo retorna las unidades prestadas total
     * de los detalles segun el tipo
     * @param tipoObjeto
     * @return
     */
    public int consultarUnidadesPrestadas(TipoObjeto tipoObjeto) {

        int unidadesPrestadasTotalDetalles = 0;
        
        if(detallePrestamo1!=null)
        {
        	unidadesPrestadasTotalDetalles+=detallePrestamo1.consutarUnidadesPrestadas(tipoObjeto);
        }
        if(detallePrestamo2!=null)
        {
        	unidadesPrestadasTotalDetalles+=detallePrestamo2.consutarUnidadesPrestadas(tipoObjeto);
        }
        return unidadesPrestadasTotalDetalles;
    }
    
    /**Punto 4
     * Metodo que verifica si el cliente del prestamo
     *  cumple con la condicion del codigo y ciudad de residencia
     * @param codigoCliente
     * @return
     */
    public boolean verificarCliente(String codigoCliente, String ciudadCliente) {
        String codigoClienteRegistrado;
        String ciudadClienteRegistrado;
        
        boolean coinciden=false;

        coinciden=cliente.verificarCodigoCiudad(codigoCliente, ciudadCliente);
        return coinciden;
    }
    /**Punto 4
     * verifica que el valor este en el rango 10000 y 200000
     * @param valorVerificar
     * @return
     */
    public boolean verificarValorPrestamoRango(double valorVerificar) {
    	
    	double  valorMaximo=200000;
    	double  valorMinimo=10000;
    	
    	boolean valorCorrecto=false;
    	
    	if(valorVerificar>valorMinimo && valorVerificar<valorMaximo)
    	{
    		valorCorrecto=true;
    	}
    	return valorCorrecto;
    }
    /**Punto 4
     * Este metodo devuelve los objetos de cada detalle segun el tipo de objeto Electrodomesticos
     * @return
     */
    public String obtenerObjetosPrestados() {

        String objetos = "";
        
        int cantidadObjetos=0;
        
        if(detallePrestamo1!=null)
        {
        	cantidadObjetos+=detallePrestamo1.consutarUnidadesPrestadas(TipoObjeto.ELECTRODOMESTICOS);
        }
        if(detallePrestamo2!=null)
        {
        	cantidadObjetos+=detallePrestamo2.consutarUnidadesPrestadas(TipoObjeto.ELECTRODOMESTICOS);
        }
        
        objetos+=" la cantidad de objetos prestados por el cliente  y de tipo electrodomesticos es :"+cantidadObjetos;
        return objetos;
    }
	public String obtenerObjetosPrestadosPrecioMayor(double precioMayor) {
		String objetosPrestados="";
		String auxiliar="";
		for(int i=0;i<listaDetallesPrestamos.length;i++)
		{
			if(listaDetallesPrestamos!=null)
			{
				auxiliar=listaDetallesPrestamos[i].obtenerObjetosPrestadosPrecioMayor(precioMayor);
				if(!auxiliar.isEmpty())
				{
					objetosPrestados+=auxiliar;
				}
			}
		}
		return objetosPrestados;
	}
	/**
	 *método que obtiene el total de las unidades prestadas de un prestamo sin
	 *importar el objeto
	 * @param 
	 * @return
	 */
	public int obtenerCantidadUnidadesPrestadas() {
		int cantidadTotal=0;
		
		for(int i=0;i<listaDetallesPrestamos.length;i++)
		{
			if(listaDetallesPrestamos[i]!=null)
			{
				cantidadTotal+=listaDetallesPrestamos[i].getUnidadesPrestadas();
			}
		}
		return cantidadTotal;
	}


}

	

